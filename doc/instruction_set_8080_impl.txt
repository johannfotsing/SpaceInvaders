
case 0x00 : cpu->pc += 1; break;						// NOP
case 0x01 : cpu->b = opcode[2]; cpu->c = opcode[1]; cpu->pc += 3; break;		// LXI B,D16
case 0x02 :						// STAX B
{
	writeCpu8080Memory(cpu, ((uint16_t)cpu->b) << 8 | ((uint16_t) cpu->c), cpu->a);
	cpu->pc += 1;
	break;
}
case 0x03 :								// INX B
{
	uint16_t w = (uint16_t) cpu->b;
	w = (w << 8) | cpu->c; w++;
	cpu->c = w & 0xff;
	cpu->b = (w >> 8) & 0xff;
	cpu->pc += 1;
	break;
}
case 0x04 : cpu->b++; updateCpu8080Flags(cpu, cpu->b); cpu->pc += 1; break;			// INR B
case 0x05 : cpu->b--; updateCpu8080Flags(cpu, cpu->b); cpu->pc += 1; break;			// DCR B
case 0x06 : cpu->b = opcode[1]; cpu->pc += 2; break;				// MVI B,D8
case 0x07 :						// RLC
{
	uint8_t prev_bit_7 = (cpu->a >> 7) & 0x01;
	cpu->a = cpu->a << 1;
	cpu->a = cpu->a | prev_bit_7;
	cpu->flags.c = prev_bit_7;
	cpu->pc += 1;
	break;
}
case 0x08 : cpu->pc += 1; break;						// NOP
case 0x09 :								// DAD B
{
	uint16_t h = (uint16_t) cpu->h;
	uint16_t l = (uint16_t) cpu->l;
	uint16_t hl = h << 8 | l;
	uint16_t rh = (uint16_t) cpu->b;
	uint16_t rl = (uint16_t) cpu->c;
	uint16_t rhl = rh << 8 | rl;
	uint32_t r = (uint32_t) hl + (uint32_t) rhl;
	cpu->flags.c = (r > 0xffff);
	cpu->l = (uint8_t) r & 0xff;
	cpu->h = (uint8_t) (r >> 8) & 0xff;
	cpu->pc += 1;
	break;
}
case 0x0a :						// LDAX B
{
	cpu->a = readCpu8080Memory(cpu, ((uint16_t)cpu->b) << 8 | ((uint16_t) cpu->c));
	cpu->pc += 1;
	break;
}
case 0x0b :								// DCX B
{
	uint16_t w = (uint16_t) cpu->b;
	w = (w << 8) | cpu->c; w--;
	cpu->c = w & 0xff;
	cpu->b = (w >> 8) & 0xff;
	cpu->pc += 1;
	break;
}
case 0x0c : cpu->c++; updateCpu8080Flags(cpu, cpu->c); cpu->pc += 1; break;			// INR C
case 0x0d : cpu->c--; updateCpu8080Flags(cpu, cpu->c); cpu->pc += 1; break;			// DCR C
case 0x0e : cpu->c = opcode[1]; cpu->pc += 2; break;				// MVI C,D8
case 0x0f :						// RRC
{
	uint8_t prev_bit_0 = cpu->a & 0x01;
	cpu->a = cpu->a >> 1;
	cpu->a = cpu->a | (prev_bit_0 << 7);
	cpu->flags.c = prev_bit_0;
	cpu->pc += 1;
	break;
}
case 0x10 : cpu->pc += 1; break;						// NOP
case 0x11 : cpu->d = opcode[2]; cpu->e = opcode[1]; cpu->pc += 3; break;		// LXI D,D16
case 0x12 :						// STAX D
{
	writeCpu8080Memory(cpu, ((uint16_t)cpu->d) << 8 | ((uint16_t) cpu->e), cpu->a);
	cpu->pc += 1;
	break;
}
case 0x13 :								// INX D
{
	uint16_t w = (uint16_t) cpu->d;
	w = (w << 8) | cpu->e; w++;
	cpu->e = w & 0xff;
	cpu->d = (w >> 8) & 0xff;
	cpu->pc += 1;
	break;
}
case 0x14 : cpu->d++; updateCpu8080Flags(cpu, cpu->d); cpu->pc += 1; break;			// INR D
case 0x15 : cpu->d--; updateCpu8080Flags(cpu, cpu->d); cpu->pc += 1; break;			// DCR D
case 0x16 : cpu->d = opcode[1]; cpu->pc += 2; break;				// MVI D,D8
case 0x17 :						// RAL
{
	uint8_t prev_bit_7 = (cpu->a >> 7) & 0x01;
	cpu->a = cpu->a << 1;
	cpu->a = cpu->a | cpu->flags.c;
	cpu->flags.c = prev_bit_7;
	cpu->pc += 1;
	break;
}
case 0x18 : cpu->pc += 1; break;						// NOP
case 0x19 :								// DAD D
{
	uint16_t h = (uint16_t) cpu->h;
	uint16_t l = (uint16_t) cpu->l;
	uint16_t hl = h << 8 | l;
	uint16_t rh = (uint16_t) cpu->d;
	uint16_t rl = (uint16_t) cpu->e;
	uint16_t rhl = rh << 8 | rl;
	uint32_t r = (uint32_t) hl + (uint32_t) rhl;
	cpu->flags.c = (r > 0xffff);
	cpu->l = (uint8_t) r & 0xff;
	cpu->h = (uint8_t) (r >> 8) & 0xff;
	cpu->pc += 1;
	break;
}
case 0x1a :						// LDAX D
{
	cpu->a = readCpu8080Memory(cpu, ((uint16_t)cpu->d) << 8 | ((uint16_t) cpu->e));
	cpu->pc += 1;
	break;
}
case 0x1b :								// DCX D
{
	uint16_t w = (uint16_t) cpu->d;
	w = (w << 8) | cpu->e; w--;
	cpu->e = w & 0xff;
	cpu->d = (w >> 8) & 0xff;
	cpu->pc += 1;
	break;
}
case 0x1c : cpu->e++; updateCpu8080Flags(cpu, cpu->e); cpu->pc += 1; break;			// INR E
case 0x1d : cpu->e--; updateCpu8080Flags(cpu, cpu->e); cpu->pc += 1; break;			// DCR E
case 0x1e : cpu->e = opcode[1]; cpu->pc += 2; break;				// MVI E,D8
case 0x1f :						// RAR
{
	uint8_t prev_bit_0 = cpu->a & 0x01;
	cpu->a = cpu->a >> 1;
	cpu->a = cpu->a | (cpu->flags.c << 7);
	cpu->flags.c = prev_bit_0;
	cpu->pc += 1;
	break;
}
case 0x20 : cpu->pc += 1; break;						// NOP
case 0x21 : cpu->h = opcode[2]; cpu->l = opcode[1]; cpu->pc += 3; break;		// LXI H,D16
case 0x22 :						// SHLD adr
{
	uint16_t mem_offset = opcode[2];
	mem_offset = (mem_offset << 8) | opcode[1];
	writeCpu8080Memory(cpu, mem_offset, cpu->l);
	writeCpu8080Memory(cpu, mem_offset + 1, cpu->h);
	cpu->pc += 3;
	break;
}
case 0x23 :								// INX H
{
	uint16_t w = (uint16_t) cpu->h;
	w = (w << 8) | cpu->l; w++;
	cpu->l = w & 0xff;
	cpu->h = (w >> 8) & 0xff;
	cpu->pc += 1;
	break;
}
case 0x24 : cpu->h++; updateCpu8080Flags(cpu, cpu->h); cpu->pc += 1; break;			// INR H
case 0x25 : cpu->h--; updateCpu8080Flags(cpu, cpu->h); cpu->pc += 1; break;			// DCR H
case 0x26 : cpu->h = opcode[1]; cpu->pc += 2; break;				// MVI H,D8
case 0x27 :						// DAA
{
	cpu8080DAA(cpu);
	cpu->pc += 1;
	break;
}
case 0x28 : cpu->pc += 1; break;						// NOP
case 0x29 :								// DAD H
{
	uint16_t h = (uint16_t) cpu->h;
	uint16_t l = (uint16_t) cpu->l;
	uint16_t hl = h << 8 | l;
	uint16_t rh = (uint16_t) cpu->h;
	uint16_t rl = (uint16_t) cpu->l;
	uint16_t rhl = rh << 8 | rl;
	uint32_t r = (uint32_t) hl + (uint32_t) rhl;
	cpu->flags.c = (r > 0xffff);
	cpu->l = (uint8_t) r & 0xff;
	cpu->h = (uint8_t) (r >> 8) & 0xff;
	cpu->pc += 1;
	break;
}
case 0x2a :						// LHLD adr
{
	uint16_t mem_offset = opcode[2];
	mem_offset = (mem_offset << 8) | opcode[1];
	cpu->l = readCpu8080Memory(cpu, mem_offset);
	cpu->h = readCpu8080Memory(cpu, mem_offset+1);
	cpu->pc += 3;
	break;
}
case 0x2b :								// DCX H
{
	uint16_t w = (uint16_t) cpu->h;
	w = (w << 8) | cpu->l; w--;
	cpu->l = w & 0xff;
	cpu->h = (w >> 8) & 0xff;
	cpu->pc += 1;
	break;
}
case 0x2c : cpu->l++; updateCpu8080Flags(cpu, cpu->l); cpu->pc += 1; break;			// INR L
case 0x2d : cpu->l--; updateCpu8080Flags(cpu, cpu->l); cpu->pc += 1; break;			// DCR L
case 0x2e : cpu->l = opcode[1]; cpu->pc += 2; break;				// MVI L, D8
case 0x2f : cpu->a = ~cpu->a; cpu->pc += 1; break;				// CMA
case 0x30 : cpu->pc += 1; break;						// NOP
case 0x31 :						// LXI SP, D16
{
	uint16_t h = opcode[2]; uint16_t l = opcode[1];
	cpu->sp = h << 8 | l;
	cpu->pc += 3;
	break;
}
case 0x32 :						// STA adr
{
	writeCpu8080Memory(cpu, ((uint16_t) opcode[2]) << 8 | ((uint16_t) opcode[1]), cpu->a);
	cpu->pc += 3;
	break;
}
case 0x33 : cpu->sp++; cpu->pc += 1; break;				// INX SP
case 0x34 : writeCpu8080MemoryAtHL(cpu, readCpu8080MemoryAtHL(cpu) + 1); updateCpu8080Flags(cpu, readCpu8080MemoryAtHL(cpu)); cpu->pc += 1; break;	// INR M
case 0x35 : writeCpu8080MemoryAtHL(cpu, readCpu8080MemoryAtHL(cpu) - 1); updateCpu8080Flags(cpu, readCpu8080MemoryAtHL(cpu)); cpu->pc += 1; break;	// DCR M
case 0x36 : writeCpu8080MemoryAtHL(cpu, opcode[1]); cpu->pc += 2; break;		// MVI M,D8
case 0x37 : cpu->flags.c = 0b1; cpu->pc += 1; break;				// STC
case 0x38 : cpu->pc += 1; break;						// NOP
case 0x39 :								// DAD SP
{
	uint16_t h = (uint16_t) cpu->h;
	uint16_t l = (uint16_t) cpu->l;
	uint16_t hl = h << 8 | l;
	uint32_t r = (uint32_t) hl + (uint32_t) cpu->sp;
	cpu->flags.c = (r > 0xffff);
	cpu->l = (uint8_t) r & 0xff;
	cpu->h = (uint8_t) r >> 8 & 0xff;
	cpu->pc += 1;
	break;
}
case 0x3a :						// LDA adr
{
	cpu->a = readCpu8080Memory(cpu, ((uint16_t) opcode[2]) << 8 | ((uint16_t) opcode[1]));
	cpu->pc += 3;
	break;
}
case 0x3b : cpu->sp--; cpu->pc += 1; break;				// DCX SP
case 0x3c : cpu->a++; updateCpu8080Flags(cpu, cpu->a); cpu->pc += 1; break;			// INR A
case 0x3d : cpu->a--; updateCpu8080Flags(cpu, cpu->a); cpu->pc += 1; break;			// DCR A
case 0x3e : cpu->a = opcode[1]; cpu->pc += 2; break;				// MVI A,D8
case 0x3f : cpu->flags.c = ~cpu->flags.c; cpu->pc += 1; break;			// CMC
case 0x40 : cpu->b = cpu->b; cpu->pc += 1; break;				// MOV B,B
case 0x41 : cpu->b = cpu->c; cpu->pc += 1; break;				// MOV B,C
case 0x42 : cpu->b = cpu->d; cpu->pc += 1; break;				// MOV B,D
case 0x43 : cpu->b = cpu->e; cpu->pc += 1; break;				// MOV B,E
case 0x44 : cpu->b = cpu->h; cpu->pc += 1; break;				// MOV B,H
case 0x45 : cpu->b = cpu->l; cpu->pc += 1; break;				// MOV B,L
case 0x46 : cpu->b = readCpu8080MemoryAtHL(cpu); cpu->pc += 1; break;			// MOV B,M
case 0x47 : cpu->b = cpu->a; cpu->pc += 1; break;				// MOV B,A
case 0x48 : cpu->c = cpu->b; cpu->pc += 1; break;				// MOV C,B
case 0x49 : cpu->c = cpu->c; cpu->pc += 1; break;				// MOV C,C
case 0x4a : cpu->c = cpu->d; cpu->pc += 1; break;				// MOV C,D
case 0x4b : cpu->c = cpu->e; cpu->pc += 1; break;				// MOV C,E
case 0x4c : cpu->c = cpu->h; cpu->pc += 1; break;				// MOV C,H
case 0x4d : cpu->c = cpu->l; cpu->pc += 1; break;				// MOV C,L
case 0x4e : cpu->c = readCpu8080MemoryAtHL(cpu); cpu->pc += 1; break;			// MOV C,M
case 0x4f : cpu->c = cpu->a; cpu->pc += 1; break;				// MOV C,A
case 0x50 : cpu->d = cpu->b; cpu->pc += 1; break;				// MOV D,B
case 0x51 : cpu->d = cpu->c; cpu->pc += 1; break;				// MOV D,C
case 0x52 : cpu->d = cpu->d; cpu->pc += 1; break;				// MOV D,D
case 0x53 : cpu->d = cpu->e; cpu->pc += 1; break;				// MOV D,E
case 0x54 : cpu->d = cpu->h; cpu->pc += 1; break;				// MOV D,H
case 0x55 : cpu->d = cpu->l; cpu->pc += 1; break;				// MOV D,L
case 0x56 : cpu->d = readCpu8080MemoryAtHL(cpu); cpu->pc += 1; break;			// MOV D,M
case 0x57 : cpu->d = cpu->a; cpu->pc += 1; break;				// MOV D,A
case 0x58 : cpu->e = cpu->b; cpu->pc += 1; break;				// MOV E,B
case 0x59 : cpu->e = cpu->c; cpu->pc += 1; break;				// MOV E,C
case 0x5a : cpu->e = cpu->d; cpu->pc += 1; break;				// MOV E,D
case 0x5b : cpu->e = cpu->e; cpu->pc += 1; break;				// MOV E,E
case 0x5c : cpu->e = cpu->h; cpu->pc += 1; break;				// MOV E,H
case 0x5d : cpu->e = cpu->l; cpu->pc += 1; break;				// MOV E,L
case 0x5e : cpu->e = readCpu8080MemoryAtHL(cpu); cpu->pc += 1; break;			// MOV E,M
case 0x5f : cpu->e = cpu->a; cpu->pc += 1; break;				// MOV E,A
case 0x60 : cpu->h = cpu->b; cpu->pc += 1; break;				// MOV H,B
case 0x61 : cpu->h = cpu->c; cpu->pc += 1; break;				// MOV H,C
case 0x62 : cpu->h = cpu->d; cpu->pc += 1; break;				// MOV H,D
case 0x63 : cpu->h = cpu->e; cpu->pc += 1; break;				// MOV H,E
case 0x64 : cpu->h = cpu->h; cpu->pc += 1; break;				// MOV H,H
case 0x65 : cpu->h = cpu->l; cpu->pc += 1; break;				// MOV H,L
case 0x66 : cpu->h = readCpu8080MemoryAtHL(cpu); cpu->pc += 1; break;			// MOV H,M
case 0x67 : cpu->h = cpu->a; cpu->pc += 1; break;				// MOV H,A
case 0x68 : cpu->l = cpu->b; cpu->pc += 1; break;				// MOV L,B
case 0x69 : cpu->l = cpu->c; cpu->pc += 1; break;				// MOV L,C
case 0x6a : cpu->l = cpu->d; cpu->pc += 1; break;				// MOV L,D
case 0x6b : cpu->l = cpu->e; cpu->pc += 1; break;				// MOV L,E
case 0x6c : cpu->l = cpu->h; cpu->pc += 1; break;				// MOV L,H
case 0x6d : cpu->l = cpu->l; cpu->pc += 1; break;				// MOV L,L
case 0x6e : cpu->l = readCpu8080MemoryAtHL(cpu); cpu->pc += 1; break;			// MOV L,M
case 0x6f : cpu->l = cpu->a; cpu->pc += 1; break;				// MOV L,A
case 0x70 : writeCpu8080MemoryAtHL(cpu, cpu->b); cpu->pc += 1; break;			// MOV M,B
case 0x71 : writeCpu8080MemoryAtHL(cpu, cpu->c); cpu->pc += 1; break;			// MOV M,C
case 0x72 : writeCpu8080MemoryAtHL(cpu, cpu->d); cpu->pc += 1; break;			// MOV M,D
case 0x73 : writeCpu8080MemoryAtHL(cpu, cpu->e); cpu->pc += 1; break;			// MOV M,E
case 0x74 : writeCpu8080MemoryAtHL(cpu, cpu->h); cpu->pc += 1; break;			// MOV M,H
case 0x75 : writeCpu8080MemoryAtHL(cpu, cpu->l); cpu->pc += 1; break;			// MOV M,L
case 0x76 : cpu->pc += 1; cpu->stopped = 1; cpu->interrupt_enabled=1; break;		// HLT

case 0x77 : writeCpu8080MemoryAtHL(cpu, cpu->a); cpu->pc += 1; break;			// MOV M,A
case 0x78 : cpu->a = cpu->b; cpu->pc += 1; break;				// MOV A,B
case 0x79 : cpu->a = cpu->c; cpu->pc += 1; break;				// MOV A,C
case 0x7a : cpu->a = cpu->d; cpu->pc += 1; break;				// MOV A,D
case 0x7b : cpu->a = cpu->e; cpu->pc += 1; break;				// MOV A,E
case 0x7c : cpu->a = cpu->h; cpu->pc += 1; break;				// MOV A,H
case 0x7d : cpu->a = cpu->l; cpu->pc += 1; break;				// MOV A,L
case 0x7e : cpu->a = readCpu8080MemoryAtHL(cpu); cpu->pc += 1; break;			// MOV A,M
case 0x7f : cpu->a = cpu->a; cpu->pc += 1; break;				// MOV A,A
case 0x80 :									// ADD B
{
	cpu->a = cpu8080Add(cpu, cpu->a, cpu->b);
	cpu->pc += 1;
	break;
}
case 0x81 :									// ADD C
{
	cpu->a = cpu8080Add(cpu, cpu->a, cpu->c);
	cpu->pc += 1;
	break;
}
case 0x82 :									// ADD D
{
	cpu->a = cpu8080Add(cpu, cpu->a, cpu->d);
	cpu->pc += 1;
	break;
}
case 0x83 :									// ADD E
{
	cpu->a = cpu8080Add(cpu, cpu->a, cpu->e);
	cpu->pc += 1;
	break;
}
case 0x84 :									// ADD H
{
	cpu->a = cpu8080Add(cpu, cpu->a, cpu->h);
	cpu->pc += 1;
	break;
}
case 0x85 :									// ADD L
{
	cpu->a = cpu8080Add(cpu, cpu->a, cpu->l);
	cpu->pc += 1;
	break;
}
case 0x86 :									// ADD M
{
	cpu->a = cpu8080Add(cpu, cpu->a, readCpu8080MemoryAtHL(cpu));
	cpu->pc += 1;
	break;
}
case 0x87 :									// ADD A
{
	cpu->a = cpu8080Add(cpu, cpu->a, cpu->a);
	cpu->pc += 1;
	break;
}
case 0x88 :									// ADC B
{
	cpu->a = cpu8080AddWithCarry(cpu, cpu->a, cpu->b);
	cpu->pc += 1;
	break;
}
case 0x89 :									// ADC C
{
	cpu->a = cpu8080AddWithCarry(cpu, cpu->a, cpu->c);
	cpu->pc += 1;
	break;
}
case 0x8a :									// ADC D
{
	cpu->a = cpu8080AddWithCarry(cpu, cpu->a, cpu->d);
	cpu->pc += 1;
	break;
}
case 0x8b :									// ADC E
{
	cpu->a = cpu8080AddWithCarry(cpu, cpu->a, cpu->e);
	cpu->pc += 1;
	break;
}
case 0x8c :									// ADC H
{
	cpu->a = cpu8080AddWithCarry(cpu, cpu->a, cpu->h);
	cpu->pc += 1;
	break;
}
case 0x8d :									// ADC L
{
	cpu->a = cpu8080AddWithCarry(cpu, cpu->a, cpu->l);
	cpu->pc += 1;
	break;
}
case 0x8e :									// ADC M
{
	uint16_t r = (uint16_t) cpu->a + (uint16_t)  + (uint16_t) cpu->flags.c;
	cpu->a = cpu8080AddWithCarry(cpu, cpu->a, readCpu8080MemoryAtHL(cpu));
	cpu->pc += 1;
	break;
}
case 0x8f :									// ADC A
{
	cpu->a = cpu8080AddWithCarry(cpu, cpu->a, cpu->a);
	cpu->pc += 1;
	break;
}
case 0x90 :									// SUB B
{
	cpu->a = cpu8080Sub(cpu, cpu->a, cpu->b);
	cpu->pc += 1;
	break;
}
case 0x91 :									// SUB C
{
	cpu->a = cpu8080Sub(cpu, cpu->a, cpu->c);
	cpu->pc += 1;
	break;
}
case 0x92 :									// SUB D
{
	cpu->a = cpu8080Sub(cpu, cpu->a, cpu->d);
	cpu->pc += 1;
	break;
}
case 0x93 :									// SUB E
{
	cpu->a = cpu8080Sub(cpu, cpu->a, cpu->e);
	cpu->pc += 1;
	break;
}
case 0x94 :									// SUB H
{
	cpu->a = cpu8080Sub(cpu, cpu->a, cpu->h);
	cpu->pc += 1;
	break;
}
case 0x95 :									// SUB L
{
	cpu->a = cpu8080Sub(cpu, cpu->a, cpu->l);
	cpu->pc += 1;
	break;
}
case 0x96 :									// SUB M
{
	cpu->a = cpu8080Sub(cpu, cpu->a, readCpu8080MemoryAtHL(cpu));
	cpu->pc += 1;
	break;
}
case 0x97 :									// SUB A
{
	cpu->a = cpu8080Sub(cpu, cpu->a, cpu->a);
	cpu->pc += 1;
	break;
}
case 0x98 :									// SBB B
{
	cpu->a = cpu8080SubWithBorrow(cpu, cpu->a, cpu->b);
	cpu->pc += 1;
	break;
}
case 0x99 :									// SBB C
{
	cpu->a = cpu8080SubWithBorrow(cpu, cpu->a, cpu->c);
	cpu->pc += 1;
	break;
}
case 0x9a :									// SBB D
{
	cpu->a = cpu8080SubWithBorrow(cpu, cpu->a, cpu->d);
	cpu->pc += 1;
	break;
}
case 0x9b :									// SBB E
{
	cpu->a = cpu8080SubWithBorrow(cpu, cpu->a, cpu->e);
	cpu->pc += 1;
	break;
}
case 0x9c :									// SBB H
{
	cpu->a = cpu8080SubWithBorrow(cpu, cpu->a, cpu->h);
	cpu->pc += 1;
	break;
}
case 0x9d :									// SBB L
{
	cpu->a = cpu8080SubWithBorrow(cpu, cpu->a, cpu->l);
	cpu->pc += 1;
	break;
}
case 0x9e :									// SBB M
{
	uint16_t r = (uint16_t) cpu->a - (uint16_t) readCpu8080MemoryAtHL(cpu) - (uint16_t) cpu->flags.c;
	cpu->a = cpu8080SubWithBorrow(cpu, cpu->a, readCpu8080MemoryAtHL(cpu));
	cpu->pc += 1;
	break;
}
case 0x9f :									// SBB A
{
	cpu->a = cpu8080SubWithBorrow(cpu, cpu->a, cpu->a);
	cpu->pc += 1;
	break;
}
case 0xa0 : cpu->a &= cpu->b; updateCpu8080Flags(cpu, cpu->a); cpu->pc += 1; break;			// ANA B
case 0xa1 : cpu->a &= cpu->c; updateCpu8080Flags(cpu, cpu->a); cpu->pc += 1; break;			// ANA C
case 0xa2 : cpu->a &= cpu->d; updateCpu8080Flags(cpu, cpu->a); cpu->pc += 1; break;			// ANA D
case 0xa3 : cpu->a &= cpu->e; updateCpu8080Flags(cpu, cpu->a); cpu->pc += 1; break;			// ANA E
case 0xa4 : cpu->a &= cpu->h; updateCpu8080Flags(cpu, cpu->a); cpu->pc += 1; break;			// ANA H
case 0xa5 : cpu->a &= cpu->l; updateCpu8080Flags(cpu, cpu->a); cpu->pc += 1; break;			// ANA L
case 0xa6 : cpu->a &= readCpu8080MemoryAtHL(cpu); updateCpu8080Flags(cpu, cpu->a); cpu->pc += 1; break;		// ANA M
case 0xa7 : cpu->a &= cpu->a; updateCpu8080Flags(cpu, cpu->a); cpu->pc += 1; break;			// ANA A
case 0xa8 : cpu->a ^= cpu->b; updateCpu8080Flags(cpu, cpu->a); cpu->pc += 1; break;			// XRA B
case 0xa9 : cpu->a ^= cpu->c; updateCpu8080Flags(cpu, cpu->a); cpu->pc += 1; break;			// XRA C
case 0xaa : cpu->a ^= cpu->d; updateCpu8080Flags(cpu, cpu->a); cpu->pc += 1; break;			// XRA D
case 0xab : cpu->a ^= cpu->e; updateCpu8080Flags(cpu, cpu->a); cpu->pc += 1; break;			// XRA E
case 0xac : cpu->a ^= cpu->h; updateCpu8080Flags(cpu, cpu->a); cpu->pc += 1; break;			// XRA H
case 0xad : cpu->a ^= cpu->l; updateCpu8080Flags(cpu, cpu->a); cpu->pc += 1; break;			// XRA L
case 0xae : cpu->a ^= readCpu8080MemoryAtHL(cpu); updateCpu8080Flags(cpu, cpu->a); cpu->pc += 1; break;		// XRA M
case 0xaf : cpu->a ^= cpu->a; updateCpu8080Flags(cpu, cpu->a); cpu->pc += 1; break;			// XRA A
case 0xb0 : cpu->a |= cpu->b; updateCpu8080Flags(cpu, cpu->a); cpu->pc += 1; break;			// ORA B
case 0xb1 : cpu->a |= cpu->c; updateCpu8080Flags(cpu, cpu->a); cpu->pc += 1; break;			// ORA C
case 0xb2 : cpu->a |= cpu->d; updateCpu8080Flags(cpu, cpu->a); cpu->pc += 1; break;			// ORA D
case 0xb3 : cpu->a |= cpu->e; updateCpu8080Flags(cpu, cpu->a); cpu->pc += 1; break;			// ORA E
case 0xb4 : cpu->a |= cpu->h; updateCpu8080Flags(cpu, cpu->a); cpu->pc += 1; break;			// ORA H
case 0xb5 : cpu->a |= cpu->l; updateCpu8080Flags(cpu, cpu->a); cpu->pc += 1; break;			// ORA L
case 0xb6 : cpu->a |= readCpu8080MemoryAtHL(cpu); updateCpu8080Flags(cpu, cpu->a); cpu->pc += 1; break;		// ORA M
case 0xb7 : cpu->a |= cpu->a; updateCpu8080Flags(cpu, cpu->a); cpu->pc += 1; break;			// ORA A
case 0xb8 : cpu->flags.c = cpu->a < cpu->b; cpu->flags.z = cpu->a == cpu->b; cpu->pc += 1; break;		// CMP B
case 0xb9 : cpu->flags.c = cpu->a < cpu->c; cpu->flags.z = cpu->a == cpu->c; cpu->pc += 1; break;		// CMP C
case 0xba : cpu->flags.c = cpu->a < cpu->d; cpu->flags.z = cpu->a == cpu->d; cpu->pc += 1; break;		// CMP D
case 0xbb : cpu->flags.c = cpu->a < cpu->e; cpu->flags.z = cpu->a == cpu->e; cpu->pc += 1; break;		// CMP E
case 0xbc : cpu->flags.c = cpu->a < cpu->h; cpu->flags.z = cpu->a == cpu->h; cpu->pc += 1; break;		// CMP H
case 0xbd : cpu->flags.c = cpu->a < cpu->l; cpu->flags.z = cpu->a == cpu->l; cpu->pc += 1; break;		// CMP L
case 0xbe :				// CMP M
{
	uint8_t m = readCpu8080MemoryAtHL(cpu);
	cpu->flags.c = cpu->a < m;
	cpu->flags.z = cpu->a == m;
	cpu->pc += 1;
	break;
}
case 0xbf : cpu->flags.c = cpu->a < cpu->a; cpu->flags.z = cpu->a == cpu->a; cpu->pc += 1; break;		// CMP A
case 0xc0 :						// RNZ
{
	cpu->pc += 1;
	if (cpu->flags.z) break;	uint16_t pcl = readCpu8080Memory(cpu, cpu->sp); cpu->sp++;
	uint16_t pch = readCpu8080Memory(cpu, cpu->sp); cpu->sp++;
	cpu->pc = (pch << 8) | pcl;
	break;
}
case 0xc1 :						// POP B
{
	cpu->c = readCpu8080Memory(cpu, cpu->sp); cpu->sp++;
	cpu->b = readCpu8080Memory(cpu, cpu->sp); cpu->sp++;
	cpu->pc += 1;
	break;
}
case 0xc2 :						// JNZ adr
{
	cpu->pc += 3;
	if (cpu->flags.z) break;
	cpu->pc = opcode[2];
	cpu->pc = (cpu->pc << 8) | opcode[1];
	break;
}
case 0xc3 :						// JMP adr
{
	cpu->pc = opcode[2];
	cpu->pc = (cpu->pc << 8) | opcode[1];
	break;
}
case 0xc4 :						// CNZ adr
{
	cpu->pc += 3;
	if (cpu->flags.z) break;
	uint8_t pcl = cpu->pc & 0xff;
	uint8_t pch = (cpu->pc >> 8) & 0xff;
	cpu->sp--; writeCpu8080Memory(cpu, cpu->sp, pch);
	cpu->sp--; writeCpu8080Memory(cpu, cpu->sp, pcl);
	cpu->pc = opcode[2];
	cpu->pc = (cpu->pc << 8) | opcode[1];
	break;
}
case 0xc5 :						// PUSH B
{
	cpu->sp--; writeCpu8080Memory(cpu, cpu->sp, cpu->b);
	cpu->sp--; writeCpu8080Memory(cpu, cpu->sp, cpu->c);
	cpu->pc += 1;
	break;
}
case 0xc6 :									// ADI D8
{
	cpu->a = cpu8080Add(cpu, cpu->a, opcode[1]);
	cpu->pc += 2;
	break;
}
case 0xc7 :						// RST 0
{
	cpu->pc += 1;
	uint8_t pcl = cpu->pc & 0xff;
	uint8_t pch = (cpu->pc >> 8) & 0xff;
	cpu->sp--; writeCpu8080Memory(cpu, cpu->sp, pch);
	cpu->sp--; writeCpu8080Memory(cpu, cpu->sp, pcl);
	cpu->pc = 0x0;
	break;
}
case 0xc8 :						// RZ
{
	cpu->pc += 1;
	if (!cpu->flags.z) break;	uint16_t pcl = readCpu8080Memory(cpu, cpu->sp); cpu->sp++;
	uint16_t pch = readCpu8080Memory(cpu, cpu->sp); cpu->sp++;
	cpu->pc = (pch << 8) | pcl;
	break;
}
case 0xc9 :						// RET
{
	uint16_t pcl = readCpu8080Memory(cpu, cpu->sp); cpu->sp++;
	uint16_t pch = readCpu8080Memory(cpu, cpu->sp); cpu->sp++;
	cpu->pc = (pch << 8) | pcl;
	break;
}
case 0xca :						// JZ adr
{
	cpu->pc += 3;
	if (!cpu->flags.z) break;
	cpu->pc = opcode[2];
	cpu->pc = (cpu->pc << 8) | opcode[1];
	break;
}
case 0xcb : cpu->pc += 1; break;						// NOP
case 0xcc :						// CZ adr
{
	cpu->pc += 3;
	if (!cpu->flags.z) break;
	uint8_t pcl = cpu->pc & 0xff;
	uint8_t pch = (cpu->pc >> 8) & 0xff;
	cpu->sp--; writeCpu8080Memory(cpu, cpu->sp, pch);
	cpu->sp--; writeCpu8080Memory(cpu, cpu->sp, pcl);
	cpu->pc = opcode[2];
	cpu->pc = (cpu->pc << 8) | opcode[1];
	break;
}
case 0xcd :						// CALL adr
{
	uint8_t pcl = cpu->pc & 0xff;
	uint8_t pch = (cpu->pc >> 8) & 0xff;
	cpu->sp--; writeCpu8080Memory(cpu, cpu->sp, pch);
	cpu->sp--; writeCpu8080Memory(cpu, cpu->sp, pcl);
	cpu->pc = opcode[2];
	cpu->pc = (cpu->pc << 8) | opcode[1];
	break;
}
case 0xce :									// ACI D8
{
	cpu->a = cpu8080AddWithCarry(cpu, cpu->a, opcode[1]);
	cpu->pc += 2;
	break;
}
case 0xcf :						// RST 1
{
	cpu->pc += 1;
	uint8_t pcl = cpu->pc & 0xff;
	uint8_t pch = (cpu->pc >> 8) & 0xff;
	cpu->sp--; writeCpu8080Memory(cpu, cpu->sp, pch);
	cpu->sp--; writeCpu8080Memory(cpu, cpu->sp, pcl);
	cpu->pc = 0x8;
	break;
}
case 0xd0 :						// RNC
{
	cpu->pc += 1;
	if (cpu->flags.c) break;	uint16_t pcl = readCpu8080Memory(cpu, cpu->sp); cpu->sp++;
	uint16_t pch = readCpu8080Memory(cpu, cpu->sp); cpu->sp++;
	cpu->pc = (pch << 8) | pcl;
	break;
}
case 0xd1 :						// POP D
{
	cpu->e = readCpu8080Memory(cpu, cpu->sp); cpu->sp++;
	cpu->d = readCpu8080Memory(cpu, cpu->sp); cpu->sp++;
	cpu->pc += 1;
	break;
}
case 0xd2 :						// JNC adr
{
	cpu->pc += 3;
	if (cpu->flags.c) break;
	cpu->pc = opcode[2];
	cpu->pc = (cpu->pc << 8) | opcode[1];
	break;
}
case 0xd3 : cpu->out[opcode[1]].data = cpu->a; cpu->pc += 2; break;		// OUT D8
case 0xd4 :						// CNC adr
{
	cpu->pc += 3;
	if (cpu->flags.c) break;
	uint8_t pcl = cpu->pc & 0xff;
	uint8_t pch = (cpu->pc >> 8) & 0xff;
	cpu->sp--; writeCpu8080Memory(cpu, cpu->sp, pch);
	cpu->sp--; writeCpu8080Memory(cpu, cpu->sp, pcl);
	cpu->pc = opcode[2];
	cpu->pc = (cpu->pc << 8) | opcode[1];
	break;
}
case 0xd5 :						// PUSH D
{
	cpu->sp--; writeCpu8080Memory(cpu, cpu->sp, cpu->d);
	cpu->sp--; writeCpu8080Memory(cpu, cpu->sp, cpu->e);
	cpu->pc += 1;
	break;
}
case 0xd6 :									// SUI D8
{
	cpu->a = cpu8080Sub(cpu, cpu->a, opcode[1]);
	cpu->pc += 2;
	break;
}
case 0xd7 :						// RST 2
{
	cpu->pc += 1;
	uint8_t pcl = cpu->pc & 0xff;
	uint8_t pch = (cpu->pc >> 8) & 0xff;
	cpu->sp--; writeCpu8080Memory(cpu, cpu->sp, pch);
	cpu->sp--; writeCpu8080Memory(cpu, cpu->sp, pcl);
	cpu->pc = 0x10;
	break;
}
case 0xd8 :						// RC
{
	cpu->pc += 1;
	if (!cpu->flags.c) break;	uint16_t pcl = readCpu8080Memory(cpu, cpu->sp); cpu->sp++;
	uint16_t pch = readCpu8080Memory(cpu, cpu->sp); cpu->sp++;
	cpu->pc = (pch << 8) | pcl;
	break;
}
case 0xd9 : cpu->pc += 1; break;						// NOP
case 0xda :						// JC adr
{
	cpu->pc += 3;
	if (!cpu->flags.c) break;
	cpu->pc = opcode[2];
	cpu->pc = (cpu->pc << 8) | opcode[1];
	break;
}
case 0xdb : cpu->a = cpu->in[opcode[1]].data; cpu->pc += 2; break;		// IN D8
case 0xdc :						// CC adr
{
	cpu->pc += 3;
	if (!cpu->flags.c) break;
	uint8_t pcl = cpu->pc & 0xff;
	uint8_t pch = (cpu->pc >> 8) & 0xff;
	cpu->sp--; writeCpu8080Memory(cpu, cpu->sp, pch);
	cpu->sp--; writeCpu8080Memory(cpu, cpu->sp, pcl);
	cpu->pc = opcode[2];
	cpu->pc = (cpu->pc << 8) | opcode[1];
	break;
}
case 0xdd : cpu->pc += 1; break;						// NOP
case 0xde :									// SBI D8
{
	cpu->a = cpu8080SubWithBorrow(cpu, cpu->a, opcode[1]);
	cpu->pc += 2;
	break;
}
case 0xdf :						// RST 3
{
	cpu->pc += 1;
	uint8_t pcl = cpu->pc & 0xff;
	uint8_t pch = (cpu->pc >> 8) & 0xff;
	cpu->sp--; writeCpu8080Memory(cpu, cpu->sp, pch);
	cpu->sp--; writeCpu8080Memory(cpu, cpu->sp, pcl);
	cpu->pc = 0x18;
	break;
}
case 0xe0 :						// RPO
{
	cpu->pc += 1;
	if (cpu->flags.p) break;	uint16_t pcl = readCpu8080Memory(cpu, cpu->sp); cpu->sp++;
	uint16_t pch = readCpu8080Memory(cpu, cpu->sp); cpu->sp++;
	cpu->pc = (pch << 8) | pcl;
	break;
}
case 0xe1 :						// POP H
{
	cpu->l = readCpu8080Memory(cpu, cpu->sp); cpu->sp++;
	cpu->h = readCpu8080Memory(cpu, cpu->sp); cpu->sp++;
	cpu->pc += 1;
	break;
}
case 0xe2 :						// JPO adr
{
	cpu->pc += 3;
	if (cpu->flags.p) break;
	cpu->pc = opcode[2];
	cpu->pc = (cpu->pc << 8) | opcode[1];
	break;
}
case 0xe3 :						// XTHL
{
	uint8_t l = cpu->l, h = cpu->h;
	cpu->l = readCpu8080Memory(cpu, cpu->sp);
	cpu->h = readCpu8080Memory(cpu, cpu->sp+1);
	writeCpu8080Memory(cpu, cpu->sp, l);
	writeCpu8080Memory(cpu, cpu->sp + 1, h);
	cpu->pc += 1;
	break;
}
case 0xe4 :						// CPO adr
{
	cpu->pc += 3;
	if (cpu->flags.p) break;
	uint8_t pcl = cpu->pc & 0xff;
	uint8_t pch = (cpu->pc >> 8) & 0xff;
	cpu->sp--; writeCpu8080Memory(cpu, cpu->sp, pch);
	cpu->sp--; writeCpu8080Memory(cpu, cpu->sp, pcl);
	cpu->pc = opcode[2];
	cpu->pc = (cpu->pc << 8) | opcode[1];
	break;
}
case 0xe5 :						// PUSH H
{
	cpu->sp--; writeCpu8080Memory(cpu, cpu->sp, cpu->h);
	cpu->sp--; writeCpu8080Memory(cpu, cpu->sp, cpu->l);
	cpu->pc += 1;
	break;
}
case 0xe6 : cpu->a &= opcode[1]; updateCpu8080Flags(cpu, cpu->a); cpu->pc += 2; break;			// ANI D8
case 0xe7 :						// RST 4
{
	cpu->pc += 1;
	uint8_t pcl = cpu->pc & 0xff;
	uint8_t pch = (cpu->pc >> 8) & 0xff;
	cpu->sp--; writeCpu8080Memory(cpu, cpu->sp, pch);
	cpu->sp--; writeCpu8080Memory(cpu, cpu->sp, pcl);
	cpu->pc = 0x20;
	break;
}
case 0xe8 :						// RPE
{
	cpu->pc += 1;
	if (!cpu->flags.p) break;	uint16_t pcl = readCpu8080Memory(cpu, cpu->sp); cpu->sp++;
	uint16_t pch = readCpu8080Memory(cpu, cpu->sp); cpu->sp++;
	cpu->pc = (pch << 8) | pcl;
	break;
}
case 0xe9 :						// PCHL
{
	cpu->pc = cpu->h;
	cpu->pc = (cpu->pc << 8) | cpu->l;
	break;
}
case 0xea :						// JPE adr
{
	cpu->pc += 3;
	if (!cpu->flags.p) break;
	cpu->pc = opcode[2];
	cpu->pc = (cpu->pc << 8) | opcode[1];
	break;
}
case 0xeb :						// XCHG
{
	uint8_t l = cpu->l, h = cpu->h;
	cpu->l = cpu->e; cpu->e = l;
	cpu->h = cpu->d; cpu->d = h;
	cpu->pc += 1;
	break;
}
case 0xec :						// CPE adr
{
	cpu->pc += 3;
	if (!cpu->flags.p) break;
	uint8_t pcl = cpu->pc & 0xff;
	uint8_t pch = (cpu->pc >> 8) & 0xff;
	cpu->sp--; writeCpu8080Memory(cpu, cpu->sp, pch);
	cpu->sp--; writeCpu8080Memory(cpu, cpu->sp, pcl);
	cpu->pc = opcode[2];
	cpu->pc = (cpu->pc << 8) | opcode[1];
	break;
}
case 0xed : cpu->pc += 1; break;						// NOP
case 0xee : cpu->a ^= opcode[1]; updateCpu8080Flags(cpu, cpu->a); cpu->pc += 2; break;			// XRI D8
case 0xef :						// RST 5
{
	cpu->pc += 1;
	uint8_t pcl = cpu->pc & 0xff;
	uint8_t pch = (cpu->pc >> 8) & 0xff;
	cpu->sp--; writeCpu8080Memory(cpu, cpu->sp, pch);
	cpu->sp--; writeCpu8080Memory(cpu, cpu->sp, pcl);
	cpu->pc = 0x28;
	break;
}
case 0xf0 :						// RP
{
	cpu->pc += 1;
	if (cpu->flags.s) break;	uint16_t pcl = readCpu8080Memory(cpu, cpu->sp); cpu->sp++;
	uint16_t pch = readCpu8080Memory(cpu, cpu->sp); cpu->sp++;
	cpu->pc = (pch << 8) | pcl;
	break;
}
case 0xf1 :						// POP PSW
{
	*((uint8_t*) &cpu->flags) = readCpu8080Memory(cpu, cpu->sp); cpu->sp++;
	cpu->a = readCpu8080Memory(cpu, cpu->sp); cpu->sp++;
	cpu->pc += 1;
	break;
}
case 0xf2 :						// JP adr
{
	cpu->pc += 3;
	if (cpu->flags.s) break;
	cpu->pc = opcode[2];
	cpu->pc = (cpu->pc << 8) | opcode[1];
	break;
}
case 0xf3 : cpu->interrupt_enabled = 0; cpu->pc += 1; break;				// DI

case 0xf4 :						// CP adr
{
	cpu->pc += 3;
	if (cpu->flags.s) break;
	uint8_t pcl = cpu->pc & 0xff;
	uint8_t pch = (cpu->pc >> 8) & 0xff;
	cpu->sp--; writeCpu8080Memory(cpu, cpu->sp, pch);
	cpu->sp--; writeCpu8080Memory(cpu, cpu->sp, pcl);
	cpu->pc = opcode[2];
	cpu->pc = (cpu->pc << 8) | opcode[1];
	break;
}
case 0xf5 :						// PUSH PSW
{
	cpu->sp--; writeCpu8080Memory(cpu, cpu->sp, cpu->a);
	cpu->sp--; writeCpu8080Memory(cpu, cpu->sp, *((uint8_t*) &cpu->flags));
	cpu->pc += 1;
	break;
}
case 0xf6 : cpu->a |= opcode[1]; updateCpu8080Flags(cpu, cpu->a); cpu->pc += 2; break;			// ORI D8
case 0xf7 :						// RST 6
{
	cpu->pc += 1;
	uint8_t pcl = cpu->pc & 0xff;
	uint8_t pch = (cpu->pc >> 8) & 0xff;
	cpu->sp--; writeCpu8080Memory(cpu, cpu->sp, pch);
	cpu->sp--; writeCpu8080Memory(cpu, cpu->sp, pcl);
	cpu->pc = 0x30;
	break;
}
case 0xf8 :						// RM
{
	cpu->pc += 1;
	if (!cpu->flags.s) break;	uint16_t pcl = readCpu8080Memory(cpu, cpu->sp); cpu->sp++;
	uint16_t pch = readCpu8080Memory(cpu, cpu->sp); cpu->sp++;
	cpu->pc = (pch << 8) | pcl;
	break;
}
case 0xf9 :						// SPHL
{
	cpu->sp = cpu->h;
	cpu->sp = (cpu->sp << 8) | cpu->l;
	cpu->pc += 1;
	break;
}
case 0xfa :						// JM adr
{
	cpu->pc += 3;
	if (!cpu->flags.s) break;
	cpu->pc = opcode[2];
	cpu->pc = (cpu->pc << 8) | opcode[1];
	break;
}
case 0xfb : cpu->interrupt_enabled = 1; cpu->pc += 1; break;				// EI

case 0xfc :						// CM adr
{
	cpu->pc += 3;
	if (!cpu->flags.s) break;
	uint8_t pcl = cpu->pc & 0xff;
	uint8_t pch = (cpu->pc >> 8) & 0xff;
	cpu->sp--; writeCpu8080Memory(cpu, cpu->sp, pch);
	cpu->sp--; writeCpu8080Memory(cpu, cpu->sp, pcl);
	cpu->pc = opcode[2];
	cpu->pc = (cpu->pc << 8) | opcode[1];
	break;
}
case 0xfd : cpu->pc += 1; break;						// NOP
case 0xfe : cpu->flags.c = cpu->a < opcode[1]; cpu->flags.z = cpu->a == opcode[1]; cpu->pc += 2; break;	// CPI D8
case 0xff :						// RST 7
{
	cpu->pc += 1;
	uint8_t pcl = cpu->pc & 0xff;
	uint8_t pch = (cpu->pc >> 8) & 0xff;
	cpu->sp--; writeCpu8080Memory(cpu, cpu->sp, pch);
	cpu->sp--; writeCpu8080Memory(cpu, cpu->sp, pcl);
	cpu->pc = 0x38;
	break;
}